name: SYSARCH-ACS CI (reusable)

on:
  workflow_call:
    inputs:
      toolchain:
        description: "Choose toolchain: 'arm' or 'gcc15'"
        required: false
        type: string
        default: "arm"
      edk2-ref:
        description: "edk2 ref/branch/tag to checkout"
        required: false
        type: string
        default: "edk2-stable202505"
      run-uefi:
        description: "Run UEFI builds"
        required: false
        type: boolean
        default: true
      run-baremetal:
        description: "Run Baremetal builds"
        required: false
        type: boolean
        default: true
      run-linux:
        description: "Run Linux ACS build"
        required: false
        type: boolean
        default: true
    secrets:
      dummy:
        required: false

jobs:
  #######################################################################
  # MATRIX: UEFI
  #######################################################################
  uefi:
    if: ${{ inputs.run-uefi }}
    name: UEFI • ${{ matrix.name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: BSA ACPI
            arg: bsa
            outfile: Bsa.efi
            artifact: Bsa_acpi_target.efi
          - name: BSA DT
            arg: bsa_dt
            outfile: Bsa.efi
            artifact: Bsa_dt_target.efi
          - name: SBSA ACPI
            arg: sbsa
            outfile: Sbsa.efi
            artifact: Sbsa.efi
          - name: DRTM ACPI
            arg: drtm
            outfile: Drtm.efi
            artifact: Drtm_acpi_target.efi
          - name: MPAM ACPI
            arg: mpam
            outfile: Mpam.efi
            artifact: Mpam_acpi_target.efi
          - name: SBSA NIST
            arg: nist
            outfile: SbsaNist.efi
            artifact: Sbsa_Nist_acpi_target.efi
          - name: PC-BSA ACPI
            arg: pc_bsa
            outfile: PC_Bsa.efi
            artifact: PC_Bsa_acpi_target.efi
          - name: Unified ACPI
            arg: unified
            outfile: UnifiedAcs.efi
            artifact: unified.efi

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential nasm wget xz-utils \
            gawk bison flex texinfo curl \
            libgmp-dev libmpfr-dev libmpc-dev libisl-dev zlib1g-dev \
            libc6-dev-arm64-cross linux-libc-dev-arm64-cross

      - name: Download edk2 and its submodules
        run: |
          git clone --recursive https://github.com/tianocore/edk2
          cd edk2
          git checkout "${{ inputs.edk2-ref }}"
          cd ..
          git clone https://github.com/tianocore/edk2-libc edk2/edk2-libc

      - name: Checkout sysarch-acs repository
        uses: actions/checkout@v4
        with:
          path: 'edk2/ShellPkg/Application/sysarch-acs'

      - name: Cache GCC15 toolchain
        if: ${{ inputs.toolchain == 'gcc15' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/gcc15-linux-gnu/install
          key: gcc15-linux-gnu-${{ runner.os }}-${{ runner.arch }}-v1

      - name: Setup toolchain (${{ inputs.toolchain }})
        run: |
          if [[ "${{ inputs.toolchain }}" == "arm" ]]; then
            echo "🔧 Downloading Arm prebuilt toolchain..."
            mkdir -p /opt/cross
            cd /opt/cross
            wget https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
            tar -xf arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
            echo "GCC5_AARCH64_PREFIX=/opt/cross/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-" >> $GITHUB_ENV

          elif [[ "${{ inputs.toolchain }}" == "gcc15" ]]; then
            echo "🔍 Checking for existing GCC 15..."
            INSTALL=$HOME/gcc15-linux-gnu/install

            if [ -x "$INSTALL/bin/aarch64-none-linux-gnu-gcc" ]; then
              echo "✅ GCC 15 already installed at $INSTALL"
            else
              echo "🔨 Building GCC 15.2.1 from source..."
              SRC=$HOME/gcc15-linux-gnu/src
              BUILD=$HOME/gcc15-linux-gnu/build
              SYSROOT=$HOME/gcc15-linux-gnu/sysroot
              SYSROOT_PATH=$SYSROOT/arm-gnu-toolchain-14.3.rel1-aarch64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/libc

              mkdir -p "$SRC" "$BUILD" "$INSTALL" "$SYSROOT"
              cd "$SYSROOT"
              wget https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-aarch64-aarch64-none-linux-gnu.tar.xz
              tar -xf arm-gnu-toolchain-14.3.rel1-aarch64-aarch64-none-linux-gnu.tar.xz

              cd "$SRC"
              curl -LO https://ftpmirror.gnu.org/binutils/binutils-2.42.tar.xz
              tar -xf binutils-2.42.tar.xz

              git clone --depth 1 --branch releases/gcc-15 --single-branch https://gcc.gnu.org/git/gcc.git
              cd gcc && ./contrib/download_prerequisites

              mkdir -p "$BUILD/binutils" && cd "$BUILD/binutils"
              "$SRC/binutils-2.42/configure" --target=aarch64-none-linux-gnu --prefix="$INSTALL" --disable-nls --disable-werror
              make -j$(nproc) && make install

              mkdir -p "$BUILD/gcc" && cd "$BUILD/gcc"
              "$SRC/gcc/configure" \
                --target=aarch64-none-linux-gnu \
                --prefix="$INSTALL" \
                --enable-languages=c,c++ \
                --disable-multilib \
                --disable-bootstrap \
                --disable-nls \
                --with-sysroot="$SYSROOT_PATH"

              make -j$(nproc) all-gcc && make install-gcc
              make -j$(nproc) all-target-libgcc && make install-target-libgcc
            fi

            echo "$INSTALL/bin" >> $GITHUB_PATH
            echo "GCC5_AARCH64_PREFIX=$INSTALL/bin/aarch64-none-linux-gnu-" >> $GITHUB_ENV
          else
            echo "::error ::Invalid toolchain selected: '${{ inputs.toolchain }}'"
            exit 1
          fi

      - name: Build ${{ matrix.name }}
        run: |
          cd edk2
          export PACKAGES_PATH=$PWD/edk2-libc
          source edksetup.sh
          make -C BaseTools/Source/C
          source ShellPkg/Application/sysarch-acs/tools/scripts/acsbuild.sh ${{ matrix.arg }}

      - name: Upload artifact (${{ matrix.artifact }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: edk2/Build/Shell/DEBUG_GCC/AARCH64/${{ matrix.outfile }}
          if-no-files-found: error

